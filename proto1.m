function [allData, scenario, sensors] = proto1()
%proto1 - Returns sensor detections
%    allData = proto1 returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = proto1 optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.9 (R2020b) and Automated Driving Toolbox 3.2 (R2020b).
% Generated on: 04-Apr-2021 14:40:48

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {});
running = true;

scenario.StopTime = 240;
[textField, hTopViewAxes] = plotScenario (scenario, egoVehicle);

objectArray = [];
delta = 8;
        p = 0;
        v = 0;
pPos = {};
vPos = {};



while running
    
    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        maxLaneDetectionRange = min(500,sensor.MaxRange);
        lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            if sensor.HasRoadsInputPort
                rdmesh = roadMesh(egoVehicle,min(500,sensor.MaxRange));
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, rdmesh, time);
            else
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, time);
            end
            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        end
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}); %#ok<AGROW>
    end
    
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime)
        objects = objectDetections;
        objectsStruct = [objects{:}];
        allPosInertial = vehicle2Inertial (objects, egoVehicle);
        
      %{
      LidarLib.process();
        
      if ~isempty(objects)
      objectsStruct = [objects{:}];
      allPosInertial = vehicle2Inertial (objects, egoVehicle);
       
      placeholder = arrayfun(@(x)x.ObjectClassID==4||x.ObjectClassID==2||x.ObjectClassID==1, objectsStruct);
      vehicles = objectsStruct(placeholder);

      for vehicle = vehicles

         if isempty(savedObjects)
           savedObjects(end+1) = {vehicle};
           %if (objectDetections{1}.ObjectClassID == 4)
           %if ismember(objectDetections{1}.Measurement, pPos)
           %        p = p + 1;
           %end

           %if (objectDetections{1}.ObjectClassID == 1 || objectDetections{1}.ObjectClassID == 2)
           %    v = v + 1;
           %end
         end

        newObjFlag = true;
            for savedObject = savedObjects
              if (savedObject{1, 1}.ObjectAttributes{1, 1}.TargetIndex == vehicle.ObjectAttributes{1, 1}.TargetIndex)
                newObjFlag = false;
              end

              if newObjFlag
                savedObjects(end+1) = {vehicle};
              end
            end
          end
        end
        %test code that worked just for LiDAR. note that it has not been modified
        %to take In data from both liDAR and Cameras. it also hasn't been setup 
        %in this version to the specific ID's
        %}
        
        disp ('class ids: ')
        disp ([objectsStruct.ObjectClassID])
        plot3(allPosInertial(1,:), allPosInertial(2,:), allPosInertial(3,:),'b.', 'parent',hTopViewAxes);
        
        message = sprintf('Counted Objects %i\n', length(objects));
        textField.String = message;
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [1.9 0], ...
    'HasNoise', false, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([800 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [0 0], ...
    'Yaw', -180, ...
    'HasNoise', false, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([800 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 68.5870305251283, ...
    'MaxRange', 50, ...
    'HasNoise', false, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{4} = visionDetectionGenerator('SensorIndex', 4, ...
    'SensorLocation', [0 0.9], ...
    'Yaw', 114.739508869748, ...
    'MaxRange', 50, ...
    'HasNoise', false, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{5} = visionDetectionGenerator('SensorIndex', 5, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -68.0088700828229, ...
    'MaxRange', 50, ...
    'HasNoise', false, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{6} = visionDetectionGenerator('SensorIndex', 6, ...
    'SensorLocation', [0 -0.9], ...
    'Yaw', -114.145541960422, ...
    'MaxRange', 50, ...
    'HasNoise', false, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{7} = lidarPointCloudGenerator('SensorIndex', 7, ...
    'SensorLocation', [0.95 0], ...
    'Yaw', -133.152389734005, ...
    'HasNoise', false, ...
    'ActorProfiles', profiles);
numSensors = 7;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [-108.5 100.3 0;
    108 100 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [100.7 115 0;
    100 -110.2 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

roadCenters = [111.3 -99.9 0;
    -109.5 -100.2 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road2');

roadCenters = [-99.9 114.3 0;
    -99.9 -112.9 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road3');

roadCenters = [0.61 100.08 0;
    -0.39 -99.42 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road4');

roadCenters = [112.85 1 0;
    -114.45 0.2 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road5');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-87.2634166014311 -1.89729539722657 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [-87.2634166014311 -1.89729539722657 0;
    -52 -1.8 0;
    -22.1 -1.8 0;
    -1.8 -1.4 0;
    48.7 -1.4 0;
    84.9 -1.1 0;
    93.09 -0.8 0.01;
    97.92 -1.27 0.01;
    99.47 -4.38 0.01;
    99.08 -12.31 0.01;
    98.7 -21.7 0;
    98.5 -33 0;
    98.2 -46.4 0;
    98.3 -68.2 0;
    98.1 -83 0;
    98.3 -92.3 0;
    97.6 -97.6 0;
    94.6 -98 0;
    89.5 -97.4 0;
    65.5 -97.8 0;
    25.4 -97.8 0;
    6.3 -98.5 0;
    2.3 -97.4 0;
    1.4 -93.4 0;
    0.9 -81.2 0;
    1.4 -65 0;
    2.1 -42.5 0;
    1.4 -9.5 0;
    2.3 14.3 0;
    2.6 33.3 0;
    2.7 49.3 0;
    2.7 62.9 0;
    2.7 90.1 0;
    2.9 96.5 0;
    2.5 100.4 0;
    -1 102.3 0;
    -8.2 102.6 0;
    -22.8 102.4 0;
    -47.2 102.5 0;
    -68.9 103.1 0;
    -84.8 102.8 0;
    -98.3 102.8 0;
    -102.3 100.7 0;
    -101.9 97.9 0;
    -101.9 90.3 0;
    -101.9 82.6 0;
    -101.9 65.8 0;
    -101.9 41 0;
    -101.9 17.1 0;
    -101.4 -15.4 0;
    -101.9 -56.6 0;
    -102.4 -68.4 0;
    -102.2 -77.6 0;
    -101.6 -84.8 0;
    -102.2 -98.1 0;
    -100.2 -101.8 0;
    -94.4 -102.4 0;
    -76.8 -102 0;
    -62.6 -102 0;
    -49.4 -101.9 0;
    -38.1 -101.9 0;
    -27.8 -101.9 0;
    -16.4 -102 0;
    -4 -101.6 0;
    -0.25 -101.02 0.01;
    2.13 -95.72 0.01;
    1.25 -77.67 0.01;
    1.8 -69.1 0;
    2.3 -47.9 0;
    1.5 -21.2 0;
    2.3 5.3 0;
    2 29 0;
    1.8 46.3 0;
    1.8 67.5 0;
    3 81.7 0;
    2.8 93.5 0;
    6.8 98.2 0;
    12.5 98.2 0;
    30.7 98.2 0;
    58.5 98 0;
    84.9 98 0;
    95.9 98.7 0;
    99.4 97.5 0;
    99.9 93.2 0;
    99.9 53.5 0;
    99.4 38.3 0;
    99.4 15.3 0;
    99.4 9.1 0;
    98.2 4.1 0;
    93.75 2.52 0.01;
    81.4 3.1 0;
    64.7 2.3 0;
    27.5 2.6 0;
    -57.4 1.6 0;
    -76.9 1.6 0;
    -93.1 1.8 0];
speed = [14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14;14];
trajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 20, ...
    'Width', 20, ...
    'Height', 20, ...
    'Position', [74.2 83.2 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [106.6 -80.8 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0 0.447 0.741], ...
    'Name', 'Pedestrian');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [106.7 -83.3 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Pedestrian1');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [105.8 -85.2 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Pedestrian2');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [92.5 -82.5 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.494 0.184 0.556], ...
    'Name', 'Pedestrian3');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [93.8 -80.4 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Pedestrian4');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [10.9 10.8 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.301 0.745 0.933], ...
    'Name', 'Pedestrian5');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-7.5 10 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Pedestrian6');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [8.5 11.9 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0 0.447 0.741], ...
    'Name', 'Pedestrian7');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [12.2 9.5 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Pedestrian8');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [11 -5.2 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Pedestrian9');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [10.1 -6.3 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.494 0.184 0.556], ...
    'Name', 'Pedestrian10');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [8 -7.9 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Pedestrian11');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-9.2 7.9 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.301 0.745 0.933], ...
    'Name', 'Pedestrian12');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-10.8 -7.5 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Pedestrian13');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-8.5 -9.1 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0 0.447 0.741], ...
    'Name', 'Pedestrian14');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-6.2 -9.9 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Pedestrian15');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-6.2 12.3 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Pedestrian16');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-87.3 106.4 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.494 0.184 0.556], ...
    'Name', 'Pedestrian17');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-89 106.5 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Pedestrian18');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-90.5 106.9 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.301 0.745 0.933], ...
    'Name', 'Pedestrian19');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-90.1 94.4 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0 0.447 0.741], ...
    'Name', 'Pedestrian20');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-88 94.6 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Pedestrian21');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 10, ...
    'Width', 5, ...
    'Height', 3, ...
    'Position', [82.3 -87.5 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House1');

car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-25.1031520617103 98.6170661138812 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Car1');
waypoints = [-25.1031520617103 98.6170661138812 0;
    -10.2 99.2 0;
    -4.97 98.85 0.01;
    -2.09 97.87 0.01;
    -1.48 95.67 0.01;
    -1.33 83.3 0.01;
    -1.33 77.01 0.01;
    -1.63 64.19 0.01;
    -2 42.4 0;
    -1.9 30.1 0;
    -1.8 8.3 0;
    -1.6 -39.3 0;
    -1.4 -67.2 0;
    -1.8 -79.7 0;
    -2.2 -90 0;
    -2.2 -94.1 0;
    -3.1 -97.9 0;
    -7.2 -98.2 0;
    -15.8 -98.8 0;
    -30.8 -98.4 0;
    -44.1 -97.9 0;
    -61.1 -98.1 0;
    -76 -97.9 0;
    -92.6 -97.6 0;
    -98.1 -96.8 0;
    -99.3 -91.6 0;
    -99.1 -79.3 0;
    -99.1 -68.5 0;
    -98.8 -51.6 0;
    -99.3 -36.6 0;
    -99.3 -22.2 0;
    -98.8 -4.8 0;
    -99.3 8.1 0;
    -99.3 27.7 0;
    -99.8 43.8 0;
    -99.3 55.3 0;
    -98.8 63.9 0;
    -98.8 75.7 0;
    -98.3 87 0;
    -98.1 95.7 0;
    -94.9 98.3 0;
    -89.5 98.7 0;
    -80.6 98.2 0;
    -63.9 98.7 0;
    -56.1 98.2 0;
    -48.8 92.6 0;
    -46.7 77.5 0];
speed = [15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;0];
trajectory(car1, waypoints, speed);

truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [98.4903860785079 30.5141512522936 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'PlotColor', [0.494 0.184 0.556], ...
    'Name', 'Truck');
waypoints = [98.4903860785079 30.5141512522936 0;
    99.1 14 0;
    98 5.7 0;
    95.7 3.5 0;
    89.4 3.2 0;
    75.8 2.6 0;
    61.6 2.6 0;
    47.3 2.8 0;
    36.2 2.6 0;
    27.3 3.2 0;
    14.7 2.6 0;
    5.6 2.5 0;
    2.5 3 0;
    1.5 5.8 0;
    1.8 12.6 0;
    2.3 23.5 0;
    2.5 39.6 0;
    2.7 55.3 0;
    2 78.4 0;
    2.4 93.2 0;
    4.4 98.6 0;
    12.8 100.2 0;
    22.6 99.3 0;
    37 100.1 0;
    46.5 99.4 0;
    62.1 99.9 0;
    79.3 99.6 0;
    93.6 99.3 0;
    99.2 95.9 0;
    98.9 91.3 0;
    98.9 81.7 0;
    97.9 64.7 0;
    98.1 50 0;
    97.9 44.4 0;
    87.6 37 0];
speed = [10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10];
trajectory(truck, waypoints, speed);

car2 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [1.8 -87.1 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Car2');
waypoints = [1.8 -87.1 0;
    2.5 -71.1 0;
    2.5 -56 0;
    2 -34.2 0;
    2.2 -18.2 0;
    2.9 -7 0;
    2.2 -3.3 0;
    1.5 0.8 0;
    -0.7 2.8 0;
    -4 2.7 0;
    -7.7 2.6 0;
    -20.2 1.9 0;
    -31.6 2.2 0;
    -42.8 2.4 0;
    -56.1 2.2 0;
    -73 1.2 0;
    -89.6 8.3 0;
    -91.1 19.9 0];
speed = [15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15];
trajectory(car2, waypoints, speed);

vehicle(scenario, ...
    'ClassID', 8, ...
    'Length', 20, ...
    'Width', 10, ...
    'Height', 5, ...
    'Position', [51 86.2 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'House2');

vehicle(scenario, ...
    'ClassID', 8, ...
    'Length', 20, ...
    'Width', 15, ...
    'Height', 20, ...
    'Position', [73.9 -72.3 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'House3');

vehicle(scenario, ...
    'ClassID', 8, ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [-16.1 88.3 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'House4');

actor(scenario, ...
    'ClassID', 5, ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 3, ...
    'Position', [86.6 65.3 0], ...
    'PlotColor', [166 166 166] / 255, ...
    'Name', 'Barrier');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 15, ...
    'Width', 10, ...
    'Height', 4, ...
    'Position', [19.6 14.7 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House5');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 15, ...
    'Width', 10, ...
    'Height', 4, ...
    'Position', [11.8 85.9 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House6');

vehicle(scenario, ...
    'ClassID', 8, ...
    'Length', 20, ...
    'Width', 10, ...
    'Height', 5, ...
    'Position', [12.2 70.5 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'House7');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 20, ...
    'Width', 20, ...
    'Height', 10, ...
    'Position', [-25.8 68.4 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House8');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 20, ...
    'Width', 20, ...
    'Height', 10, ...
    'Position', [-90.2 80.2 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House9');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 20, ...
    'Width', 20, ...
    'Height', 10, ...
    'Position', [75.4 -17.1 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House10');

vehicle(scenario, ...
    'ClassID', 8, ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [83.5 19.9 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'House11');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 15, ...
    'Width', 10, ...
    'Height', 4, ...
    'Position', [78.8 49.9 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House12');

vehicle(scenario, ...
    'ClassID', 8, ...
    'Length', 20, ...
    'Width', 10, ...
    'Height', 5, ...
    'Position', [73.5 -39.1 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'House13');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 15, ...
    'Width', 10, ...
    'Height', 4, ...
    'Position', [77.9 -53.4 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House14');

vehicle(scenario, ...
    'ClassID', 8, ...
    'Length', 15, ...
    'Width', 15, ...
    'Height', 10, ...
    'Position', [-63.2 81.1 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'House15');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 15, ...
    'Width', 10, ...
    'Height', 4, ...
    'Position', [-43.3 83.1 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House16');

vehicle(scenario, ...
    'ClassID', 8, ...
    'Length', 20, ...
    'Width', 15, ...
    'Height', 20, ...
    'Position', [-29.4 23.5 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'House17');

vehicle(scenario, ...
    'ClassID', 8, ...
    'Length', 15, ...
    'Width', 15, ...
    'Height', 10, ...
    'Position', [-22 45.2 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'House18');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 20, ...
    'Width', 20, ...
    'Height', 10, ...
    'Position', [-27.8 -80.1 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House19');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 15, ...
    'Width', 10, ...
    'Height', 4, ...
    'Position', [-25.4 -16.8 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House20');

actor(scenario, ...
    'ClassID', 5, ...
    'Length', 50, ...
    'Width', 90, ...
    'Height', 0.5, ...
    'Position', [-69.1 -49.8 0], ...
    'PlotColor', [166 166 166] / 255, ...
    'Name', 'Barrier1');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 10, ...
    'Width', 5, ...
    'Height', 3, ...
    'Position', [-41.1 -87.3 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House21');

actor(scenario, ...
    'ClassID', 5, ...
    'Length', 50, ...
    'Width', 70, ...
    'Height', 0.5, ...
    'Position', [31.3 -57.6 0], ...
    'PlotColor', [166 166 166] / 255, ...
    'Name', 'Barrier2');

vehicle(scenario, ...
    'ClassID', 8, ...
    'Length', 20, ...
    'Width', 10, ...
    'Height', 5, ...
    'Position', [51.5 -12.4 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'House22');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 15, ...
    'Width', 10, ...
    'Height', 4, ...
    'Position', [27.4 -12.7 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House23');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 20, ...
    'Width', 20, ...
    'Height', 10, ...
    'Position', [43.4 17.6 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House24');

vehicle(scenario, ...
    'ClassID', 8, ...
    'Length', 15, ...
    'Width', 15, ...
    'Height', 10, ...
    'Position', [-23.9 -55.9 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'House25');

vehicle(scenario, ...
    'ClassID', 8, ...
    'Length', 20, ...
    'Width', 10, ...
    'Height', 5, ...
    'Position', [-28.6 -32.8 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'House26');

vehicle(scenario, ...
    'ClassID', 7, ...
    'Length', 15, ...
    'Width', 10, ...
    'Height', 4, ...
    'Position', [-87.7 16 0], ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'House27');

vehicle(scenario, ...
    'ClassID', 8, ...
    'Length', 20, ...
    'Width', 15, ...
    'Height', 20, ...
    'Position', [-89.9 54.9 0], ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'House28');

actor(scenario, ...
    'ClassID', 5, ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 3, ...
    'Position', [-38.6 19.9 0], ...
    'PlotColor', [166 166 166] / 255, ...
    'Name', 'Barrier3');

car3 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-101.395527745252 37.054377589797 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.301 0.745 0.933], ...
    'Name', 'Car3');
waypoints = [-101.395527745252 37.054377589797 0;
    -101.5 19.4 0;
    -101.5 3.1 0;
    -101.2 -14.5 0;
    -101.5 -35.9 0;
    -101.3 -48.8 0;
    -101.6 -68.8 0;
    -101.8 -81.2 0;
    -102.6 -93.7 0;
    -101.6 -99.9 0;
    -100.2 -102.2 0;
    -96.9 -103.5 0;
    -86.7 -102.6 0;
    -66.3 -102.1 0;
    -53.4 -101.7 0;
    -43.4 -101.7 0;
    -31.7 -101.7 0;
    -24 -101.7 0;
    -14.5 -102.1 0;
    0.4 -102.2 0;
    16 -102.1 0;
    28.4 -102.6 0;
    37.1 -102.4 0;
    46.9 -102.3 0;
    60.3 -101.8 0;
    81.2 -102.3 0;
    92 -102.1 0;
    98.2 -102.1 0;
    101.1 -101.3 0;
    102 -101 0;
    102.6 -97.5 0;
    102.6 -91 0;
    102.1 -78.6 0;
    102.1 -50.9 0;
    102.2 -32.9 0;
    102 -17.2 0;
    102.2 -4.4 0;
    102.5 -2.1 0;
    104.5 -1 0;
    108.9 -0.8 0;
    116.4 -1 0;
    123.9 -1.1 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30];
trajectory(car3, waypoints, speed);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
else
    output = 'Objects only';
end


